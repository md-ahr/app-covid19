{"version":3,"sources":["components/dataTable.js","components/dashboard.js","components/country.js","App.js","serviceWorker.js","index.js"],"names":["DataTable","useState","items","setItems","loading","setLoading","useEffect","a","axios","res","data","getAllData","className","map","item","index","key","active","deaths","to","country","target","toLocaleString","cases","todayCases","todayDeaths","recovered","Number","critical","casesPerOneMillion","deathsPerOneMillion","totalTests","testsPerOneMillion","Dashboard","todayActive","getTotalCount","id","Country","props","match","params","getCountryData","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4cae6ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst DataTable = () => {\r\n\r\n    const [ items, setItems ] = useState([]);\r\n\r\n    const [ loading, setLoading ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getAllData = async () => {\r\n            const res = await axios('https://coronavirus-19-api.herokuapp.com/countries');\r\n            const data = res.data;\r\n            setItems(...items, data);\r\n            setLoading(false);\r\n        };\r\n        getAllData();\r\n        setLoading(true);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"table-responsive count__wrapper--tbl mt-5\">\r\n            {loading ? <span className=\"text-loading\">Please wait...</span> : \r\n            <table className=\"table table-bordered table-hover text-center\">\r\n                <thead className=\"bg-light\">\r\n                    <tr>\r\n                        <th>#</th>\r\n                        <th>Country</th>\r\n                        <th>Total Cases</th>\r\n                        <th>New Cases</th>\r\n                        <th>Total Deaths</th>\r\n                        <th>New Deaths</th>\r\n                        <th>Total Recovered</th>\r\n                        <th>Active Cases</th>\r\n                        <th>Critical Cases</th>\r\n                        <th>Total Cases / 1M Pop</th>\r\n                        <th>Total Deaths / 1M Pop</th>\r\n                        <th>Total Tests</th>\r\n                        <th>Total Tests / 1M Pop</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        items.map((item, index) => (\r\n                            <tr key={index} className={(item.active === 0 && item.deaths === 0) ? 'green' : ''}>\r\n                                <td>{index}</td>\r\n                                <td><Link to={\"countries/\"+item.country} target=\"_blank\">{item.country.toLocaleString()}</Link></td>\r\n                                <td>{item.cases.toLocaleString()}</td>\r\n                                {(item.todayCases > 0) ? <td className=\"new-case\">{item.todayCases.toLocaleString()}</td> : <td></td>}\r\n                                {(item.deaths > 0) ? <td>{item.deaths.toLocaleString()}</td> : <td></td>}\r\n                                {(item.todayDeaths > 0) ? <td className={item.todayDeaths > 0 ? 'new-death' : ''}>{item.todayDeaths.toLocaleString()}</td> : <td></td>}\r\n                                {(item.recovered > 0) ? <td>{Number(item.recovered).toLocaleString()}</td> : <td>N/A</td>}\r\n                                {(item.active > 0) ? <td>{Number(item.active).toLocaleString()}</td> : <td>N/A</td>}\r\n                                {(item.critical > 0) ? <td>{item.critical.toLocaleString()}</td> : <td></td>}\r\n                                {(item.casesPerOneMillion > 0) ? <td>{item.casesPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                                {(item.deathsPerOneMillion > 0) ? <td>{item.deathsPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                                {(item.totalTests > 0) ? <td>{item.totalTests.toLocaleString()}</td> : <td></td>}\r\n                                {(item.testsPerOneMillion > 0) ? <td>{item.testsPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            }\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default DataTable;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport DataTable from './dataTable';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const [ items, setItems ] = useState({\r\n        cases: '',\r\n        deaths: '',\r\n        recovered: '',\r\n        critical: '',\r\n        todayCases: '',\r\n        todayDeaths: '',\r\n        todayActive: '',\r\n        casesPerOneMillion: '',\r\n        deathsPerOneMillion: '',\r\n        testsPerOneMillion: '',\r\n        totalTests: ''\r\n    });\r\n\r\n    const [ loading, setLoading ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getTotalCount = async () => {\r\n            const res = await axios('https://coronavirus-19-api.herokuapp.com/countries/world');\r\n            const data = res.data;\r\n            setItems({\r\n                cases: data.cases,\r\n                deaths: data.deaths,\r\n                recovered: data.recovered,\r\n                critical: data.critical,\r\n                todayCases: data.todayCases,\r\n                todayDeaths: data.todayDeaths,\r\n                todayActive: data.active,\r\n                casesPerOneMillion: data.casesPerOneMillion,\r\n                deathsPerOneMillion: data.deathsPerOneMillion,\r\n                testsPerOneMillion: data.testsPerOneMillion,\r\n                totalTests: data.totalTests\r\n            });\r\n            setLoading(false);\r\n        };\r\n        getTotalCount();\r\n        setLoading(true);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container text-center\" id=\"dashboard\">\r\n            <div className=\"count__wrapper\">\r\n                <h1 className=\"count__wrapper--title text-uppercase\">Covid-19 Live Update</h1>\r\n                <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\r\n                    <div className=\"card count__wrapper--case\">\r\n                        <div className=\"card-header\">Total Cases</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.cases.toLocaleString() }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card count__wrapper--death \">\r\n                        <div className=\"card-header\">Total Deaths</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.deaths.toLocaleString() }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card count__wrapper--recover\">\r\n                        <div className=\"card-header\">Total Recovered</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.recovered.toLocaleString() }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex justify-content-between align-items-center flex-wrap mt-5\">\r\n                    <div className=\"card count__wrapper--active\">\r\n                        <div className=\"card-header\">Active Cases</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : (items.cases - items.recovered - items.deaths).toLocaleString() }\r\n                            <p className=\"small-text\">Currently Infected Patients</p>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div className=\"count__wrapper--mild\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : ((items.cases - items.recovered - items.deaths) - items.critical).toLocaleString() }</p>\r\n                                    <p className=\"text\">In Mild Condition</p>\r\n                                </div>\r\n                                <div className=\"count__wrapper--critical\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.critical.toLocaleString() }</p>\r\n                                    <p className=\"text\">Serious or Critical</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card count__wrapper--closed\">\r\n                        <div className=\"card-header\">Closed Cases</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : (items.recovered + items.deaths).toLocaleString() }\r\n                            <p className=\"small-text\">Cases which had an outcome</p>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div className=\"count__wrapper--discharge\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.recovered.toLocaleString() }</p>\r\n                                    <p className=\"text\">Recovered / Discharged</p>\r\n                                </div>\r\n                                <div className=\"count__wrapper--gone\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.deaths.toLocaleString() }</p>\r\n                                    <p className=\"text\">Deaths</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <DataTable />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Dashboard;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Country = (props) => {\r\n\r\n    const [ items, setItems ] = useState([]);\r\n    const [ loading, setLoading ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const country = props.match.params.country;\r\n        const getCountryData = async () => {\r\n            const res = await axios(`https://coronavirus-19-api.herokuapp.com/countries/${country}`);\r\n            const data = res.data;\r\n            setItems(...items, data);\r\n            setLoading(false);\r\n        };\r\n        getCountryData();\r\n        setLoading(true);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <section className=\"container text-center\" id=\"country\">\r\n            <h1 className=\"title border-bottom pb-2\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : items.country }</h1>\r\n            <div className=\"count__wrapper mt-4\">\r\n                <div className=\"count__wrapper--case\">\r\n                    <h3 className=\"count__wrapper--title\">Total Cases</h3>\r\n                    <p className=\"count__wrapper--number case\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.cases).toLocaleString() }</p>\r\n                </div>\r\n                <div className=\"count__wrapper--death mt-4\">\r\n                    <h3 className=\"count__wrapper--title\">Total Deaths</h3>\r\n                    <p className=\"count__wrapper--number death\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.deaths).toLocaleString() }</p>\r\n                </div>\r\n                <div className=\"count__wrapper--recover mt-4\">\r\n                    <h3 className=\"count__wrapper--title\">Total Recovered</h3>\r\n                    <p className=\"count__wrapper--number recover\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.recovered).toLocaleString() }</p>\r\n                </div>\r\n                <div className=\"d-flex justify-content-between align-items-center flex-wrap mt-5\">\r\n                    <div className=\"card count__wrapper--active\">\r\n                        <div className=\"card-header\">Active Cases</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : (items.cases - items.recovered - items.deaths).toLocaleString() }\r\n                            <p className=\"small-text\">Currently Infected Patients</p>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div className=\"count__wrapper--mild\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : ((items.cases - items.recovered - items.deaths) - items.critical).toLocaleString() }</p>\r\n                                    <p className=\"small-text\">In Mild Condition</p>\r\n                                </div>\r\n                                <div className=\"count__wrapper--critical\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.critical).toLocaleString() }</p>\r\n                                    <p className=\"small-text\">Serious or Critical</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card count__wrapper--closed\">\r\n                        <div className=\"card-header\">Closed Cases</div>\r\n                        <div className=\"card-body\">\r\n                            { loading ? <span className=\"fa fa-spinner fa-spin\"></span> : (items.recovered + items.deaths).toLocaleString() }\r\n                            <p className=\"small-text\">Cases which had an outcome</p>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div className=\"count__wrapper--discharge\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.recovered).toLocaleString() }</p>\r\n                                    <p className=\"small-text\">Recovered / Discharged</p>\r\n                                </div>\r\n                                <div className=\"count__wrapper--gone\">\r\n                                    <p className=\"number mb-0\">{ loading ? <span className=\"fa fa-spinner fa-spin\"></span> : Number(items.deaths).toLocaleString() }</p>\r\n                                    <p className=\"small-text\">Deaths</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"table-responsive mt-5\">\r\n                { loading ? <span className=\"text-loading\">Please wait...</span> :  \r\n                <table className=\"table table-bordered text-left\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th className=\"bg-light\">Country</th>\r\n                            <td>{items.country}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light\">Total Cases</th>\r\n                            {(items.cases > 0) ? <td>{items.cases.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">New Cases</th>\r\n                            {(items.todayCases > 0) ? <td>{items.todayCases.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Deaths</th>\r\n                            {(items.deaths > 0) ? <td>{items.deaths.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">New Deaths</th>\r\n                            {(items.todayDeaths > 0) ? <td>{items.todayDeaths.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Recovered</th>\r\n                            {(items.recovered > 0) ? <td>{Number(items.recovered).toLocaleString()}</td> : <td>N/A</td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Active Cases</th>\r\n                            {(items.active > 0) ? <td>{Number(items.active).toLocaleString()}</td> : <td>N/A</td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Critical Cases</th>\r\n                            {(items.critical > 0) ? <td>{items.critical.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Cases / 1M Pop</th>\r\n                            {(items.casesPerOneMillion > 0) ? <td>{items.casesPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Deaths / 1M Pop</th>\r\n                            {(items.deathsPerOneMillion > 0) ? <td>{items.deathsPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Tests</th>\r\n                            {(items.totalTests > 0) ? <td>{items.totalTests.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"bg-light w-25\">Total Tests / 1M Pop</th>\r\n                            {(items.testsPerOneMillion > 0) ? <td>{items.testsPerOneMillion.toLocaleString()}</td> : <td></td>}\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                }\r\n            </div>\r\n        </section>\r\n    );\r\n\r\n}\r\n\r\nexport default Country;","import React from 'react';\nimport Dashboard from './components/dashboard';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Country from './components/country';\n\nconst App = () => {\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={Dashboard} />\n        <Route path=\"/countries/:country\" component={Country} />\n      </Switch>\n    </Router>\n  );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/scss/app.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}